name: terraform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Terraform Init (Light)
        working-directory: ./02_infrastructure
        run: terraform init -backend=false
          
      - name: Terraform Validate
        working-directory: ./02_infrastructure
        run: terraform validate
        
      - name: Terraform Format Check
        working-directory: ./02_infrastructure
        run: |
          terraform fmt -check -recursive || echo "::warning::Some Terraform files need formatting"
          terraform fmt -recursive  # Автоисправление форматирования
          git diff --exit-code || echo "::notice::Fixed formatting automatically"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
#    environment: production
    permissions:
      contents: read
      id-token: write  # Для OIDC аутентификации
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false


      - name: Configure AWS CLI for Yandex Cloud
        run: |
          aws configure set aws_access_key_id ${{ env.YC_STORAGE_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ env.YC_STORAGE_SECRET_KEY }}
          aws configure set default.region ${{ env.YC_REGION }}
          aws --endpoint-url ${{ env.YC_STORAGE_ENDPOINT }} s3 ls s3://${{ env.TF_BACKEND_BUCKET }} || echo "Bucket access check"



      - name: Terraform Init
        working-directory: ./terraform/kub
        run: |
          terraform init -reconfigure \
            -backend-config="access_key=${{ secrets.YC_STORAGE_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.YC_STORAGE_SECRET_KEY }}" \
            -backend-config="endpoint=${{ env.YC_STORAGE_ENDPOINT }}" \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="region=${{ env.YC_REGION }}" \
            -backend-config="skip_region_validation=true" \
            -backend-config="force_path_style=true"


      - name: Terraform Plan
        working-directory: ./terraform/kub
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          # Выполняем plan и сохраняем вывод в файл
          terraform plan -out=tfplan \
            -var="token=$YC_TOKEN" \
            -var="cloud_id=$YC_CLOUD_ID" \
            -var="folder_id=$YC_FOLDER_ID" > plan_output.txt
          
          # Фильтруем вывод, оставляя только изменения
          grep -E '(^  #|^  \+|^  \-|^  ~|^Plan:)' plan_output.txt | tee filtered_plan.txt
          
          # Добавляем аннотацию в GitHub UI
          echo "::notice::$(cat filtered_plan.txt)"
          
          # Сохраняем план как артефакт
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
          cat filtered_plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Всегда завершаем успешно, даже если есть изменения
          exit 0

      - name: Terraform Apply
        working-directory: ./02_infrastructure
        run: terraform apply -auto-approve tfplan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'